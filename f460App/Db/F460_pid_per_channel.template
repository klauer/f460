# PID settings
# *** all untested -- not yet implemented on controller
# vim: ts=2 sw=2
#
## CONFigure:PID:MODE {PIDNo, Mode}
#        Set (query) the PID mode for PID number PIDNo, PIDNo = 1 or 2.
#        Mode options for process variable:
#        0:  Custom
#        1:  I1
#        2:  I1+I2
#        3:  I1-I2
#        4:  I1/I2
#        5:  X
#        6:  Y
#        7:  I1+I2+I3+I4
#        
#        8:  Custom
#        9:  I1
#       10:  I1+I2
#       11:  I1-I2
#       12:  I1/I2
#       13:  X
#       14:  Y
#       15:  I1+I2+I3+I4
record(mbbo, "$(P)PID$(PID):MODE_OUT") {
  field(DESC, "PID$(PID) mode")
  field(SCAN, "Passive")

  field(ZRVL, 0)
  field(ONVL, 1)
  field(TWVL, 2)
  field(THVL, 3)
  field(FRVL, 4)
  field(FVVL, 5)
  field(SXVL, 6)
  field(SVVL, 7)
  field(EIVL, 257)
  field(NIVL, 258)
  field(TEVL, 258)
  field(ELVL, 260)
  field(TVVL, 261)
  field(TTVL, 262)
  field(FTVL, 263)

  field(ZRST, "Off")
  field(ONST, "PID I1")
  field(TWST, "PID I1+I2")
  field(THST, "PID I1-I2")
  field(FRST, "PID I1/I2")
  field(FVST, "PID X")
  field(SXST, "PID Y")
  field(SVST, "PID I1+I2+I3+I4")
  field(EIST, "Profile I1")
  field(NIST, "Profile I1+I2")
  field(TEST, "Profile I1-I2")
  field(ELST, "Profile I1/I2")
  field(TVST, "Profile X")
  field(TTST, "Profile Y")
  field(FTST, "Profile I1+I2+I3+I4")

  field(FLNK, "$(P)PID:WRITE_MODE")
  info(autosaveFields, "VAL")
}

record(mbbi, "$(P)PID$(PID):MODE_IN") {
  field(DESC, "PID$(PID) mode")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readChInt($(P),CONF:PID:MOD,$(PID)) $(PORT) 0")

  field(ZRVL, 0)
  field(ONVL, 1)
  field(TWVL, 2)
  field(THVL, 3)
  field(FRVL, 4)
  field(FVVL, 5)
  field(SXVL, 6)
  field(SVVL, 7)
  field(EIVL, 257)
  field(NIVL, 258)
  field(TEVL, 258)
  field(ELVL, 260)
  field(TVVL, 261)
  field(TTVL, 262)
  field(FTVL, 263)

  field(ZRST, "Off")
  field(ONST, "PID I1")
  field(TWST, "PID I1+I2")
  field(THST, "PID I1-I2")
  field(FRST, "PID I1/I2")
  field(FVST, "PID X")
  field(SXST, "PID Y")
  field(SVST, "PID I1+I2+I3+I4")
  field(EIST, "Profile I1")
  field(NIST, "Profile I1+I2")
  field(TEST, "Profile I1-I2")
  field(ELST, "Profile I1/I2")
  field(TVST, "Profile X")
  field(TTST, "Profile Y")
  field(FTST, "Profile I1+I2+I3+I4")
  field(ZRST, "Off")
}


# CONF:PID:LIMit {PIDNo, LO, HI}
#     Set (query) the control output analog limits for servo PIDNo to LO and HI (in range -10V to +10V). 
#     Control output for PIDNo=1 is analog output 1
#     Control output for PIDNo=2 is analog output 2
record(ai, "$(P)PID$(PID):LO_IN") {
  field(DESC, "PID$(PID) low limit")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(INP, "@F460.protocol getLimit($(P),PID$(PID):,$(PID),CONF:PID:LIM) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ai, "$(P)PID$(PID):HI_IN") {
  field(DESC, "PID$(PID) high limit")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ao, "$(P)PID$(PID):LO_OUT") {
  field(DESC, "PID$(PID) servo low lim")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(P)PID$(PID):WRITE_LIM")
  info(autosaveFields, "VAL")
}

record(ao, "$(P)PID$(PID):HI_OUT") {
  field(DESC, "PID$(PID) servo high lim")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(P)PID$(PID):WRITE_LIM")
  info(autosaveFields, "VAL")
}

record(calcout, "$(P)PID$(PID):WRITE_LIM") {
  field(DESC, "PID$(PID) write limits")
  field(DTYP, "stream")
  field(CALC, "0")
  field(INPA, "$(P)PID$(PID):LO_OUT")
  field(INPB, "$(P)PID$(PID):HI_OUT")
  field(OUT, "@F460.protocol setLimit($(P),PID$(PID),$(PID),CONF:PID:LIM) $(PORT) 0")
  field(FLNK, "$(P)PID$(PID):LO_IN")
  info(autosaveFields, "VAL A B")
}

# CONF:PID:SIGilow {PIDNo, SigI}
#     Set (query) the sum SigI amps of the input currents used to form the process variable for PIDNo  
#     in the selected mode, below which the servo will be suspended

record(ai, "$(P)PID$(PID):SIG_IN") {
  field(DESC, "PID$(PID) Servo SigI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "A")
  field(INP, "@F460.protocol readChFloat($(P),CONF:PID:SIG,$(PID)) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(P)PID$(PID):SIG_OUT") {
  field(DESC, "PID$(PID) Servo SigI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(P),CONF:PID:SIG,$(PID)) $(PORT) 0")
  field(EGU, "A")
  field(FLNK, "$(P)PID$(PID):SIG_IN")
  info(autosaveFields, "VAL")
}

# CONF:PID:KP {PIDNo, Prop}
#     Set (query) the proportional parameter for servo PIDNo to Prop.
#
record(ai, "$(P)PID$(PID):KP_IN") {
  field(DESC, "PID$(PID) Servo KP")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readChFloat($(P),CONF:PID:KP,$(PID)) $(PORT) 0")
  field(TPRO, 1)
  field(PREC, "$(PREC)")
}

record(ao, "$(P)PID$(PID):KP_OUT") {
  field(DESC, "PID$(PID) Servo KP")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(P),CONF:PID:KP,$(PID)) $(PORT) 0")
  field(FLNK, "$(P)PID$(PID):KP_IN")
  field(TPRO, 1)
  info(autosaveFields, "VAL")
}

# CONF:PID:KI {PIDNo, Prop}
#     Set (query) the integral parameter for servo PIDNo to Int.
record(ai, "$(P)PID$(PID):KI_IN") {
  field(DESC, "PID$(PID) Servo KI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readChFloat($(P),CONF:PID:KI,$(PID)) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(P)PID$(PID):KI_OUT") {
  field(DESC, "PID$(PID) Servo KI")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(P),CONF:PID:KI,$(PID)) $(PORT) 0")
  field(FLNK, "$(P)PID$(PID):KI_IN")
  info(autosaveFields, "VAL")
}

# CONF:PID:REF {PIDNo}
#     Set (query) the reference value that is divided out from all
#     sensor values for PID
record(ai, "$(P)PID$(PID):REF_IN") {
  field(DESC, "PID$(PID) reference")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readChFloat($(P),CONF:PID:REF,$(PID)) $(PORT) 0")
  field(PREC, "$(PREC)")
}

record(ao, "$(P)PID$(PID):REF_OUT") {
  field(DESC, "PID$(PID) reference")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(OUT, "@F460.protocol writeChFloat($(P),CONF:PID:REF,$(PID)) $(PORT) 0")
  field(FLNK, "$(P)PID$(PID):REF_IN")
  info(autosaveFields, "VAL")
}

# CONF:PID:PROF:LIMit PIDNo, LO, HI
#     Set (query) the low and high DAC limits in volts for the automated sweep for servo PIDNo.  
#     The sweep will use the number of points set as the buffer size.
record(ai, "$(P)PID$(PID):DACLO_IN") {
  field(DESC, "PID$(PID) low DAC limit")
  field(DTYP, "stream")
  field(INP, "@F460.protocol getLimit($(P),PID$(PID):DAC,$(PID),CONF:PID:PROF:LIM) $(PORT) 0")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ai, "$(P)PID$(PID):DACHI_IN") {
  field(DESC, "PID$(PID) high DAC limit")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(EGU, "V")
  field(PREC, "$(PREC)")
}

record(ao, "$(P)PID$(PID):DACLO_OUT") {
  field(DESC, "PID$(PID) Servo DAC low")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(P)PID$(PID):WRITE_DACLIM")
  info(autosaveFields, "VAL")
}

record(ao, "$(P)PID$(PID):DACHI_OUT") {
  field(DESC, "PID$(PID) Servo DAC high")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(EGU, "V")
  field(DRVH, "10.0")
  field(DRVL, "-10.0")
  field(FLNK, "$(P)PID$(PID):WRITE_DACLIM")
  info(autosaveFields, "VAL")
}

record(calcout, "$(P)PID$(PID):WRITE_DACLIM") {
  field(DESC, "PID$(PID) Write DAC limits")
  field(DTYP, "stream")
  field(CALC, "0")
  field(INPA, "$(P)PID$(PID):DACLO_OUT")
  field(INPB, "$(P)PID$(PID):DACHI_OUT")
  field(OUT, "@F460.protocol setLimit($(P),PID$(PID),$(PID),CONF:PID:PROF:LIM) $(PORT) 0")
  field(FLNK, "$(P)PID$(PID):DACLO_IN")
  info(autosaveFields, "VAL A B")
}

#
## FET:PID? {PIDNo}
#     Fetch the running servo data for servo PIDNo.  Returns {DAC present V, AnalogIn1 V, AnalogIn2,  
#     Measured process value f(I1,I2,I3,I4),  Target process value f(I1,I2,I3,I4), 
#     Sum of (TargetProcessValue-ActualProcessValue), Following error (TargetProcessValue-ActualProcessValue), Error state}
#
#     Error states:
#      0x01 if DAC limit hit
#      0x02 if data invalid or current low limit hit
#

#  *** TODO ***

## PID:PROFile pidno 0|1
#     Set (query) automatic profile state for servo PIDNo
#     The profile will remain enabled until either turned off by this command, or 
#     when all data points have been read and the profile is completed.

record(bo, "$(P)PID$(PID):PROF_OUT") {
  field(DESC, "PID$(PID) profile enable")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(PINI, "$(PINI)")
  field(OUT, "@F460.protocol writeChInt($(P),PID:PROF,$(PID)) $(PORT) 0")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(FLNK, "$(P)PID$(PID):PROF_IN")
  info(autosaveFields, "VAL")
}

record(bi, "$(P)PID$(PID):PROF_IN") {
  field(DESC, "PID$(PID) Profile enable")
  field(DTYP, "stream")
  field(PINI, "$(PINI)")
  field(INP, "@F460.protocol readChInt($(P),PID:PROF,$(PID)) $(PORT) 0")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}


# CONF:PID:MODe [mode0] [mode1]
record(calcout, "$(P)PID:WRITE_MODE") {
  field(DESC, "Write PID modes")
  field(DTYP, "stream")
  field(CALC, "0")
  field(INPA, "$(P)PID0:MODE_OUT.VAL")
  field(INPB, "$(P)PID1:MODE_OUT.VAL")
  field(OUT, "@F460.protocol setPIDMode($(P)) $(PORT) 0")
  field(FLNK, "$(P)PID:READ_MODE")
}

record(fanout, "$(P)PID:READ_MODE") {
  field(LNK1, "$(P)PID0:MODE_IN")
  field(LNK2, "$(P)PID1:MODE_IN")
}


